As branchs podem ser consideradas como galhos ou ramos

Possíveis traduções:

o ramo, a filial, a ramificação

As branchs são caminhos diferentes que iremos seguir durante o caminho de desenvolvimento. Cada branch pode ser considerada como um local para armazenar o versionamento do seu código.

No começo nós desenvolvemos tudo em uma Branch principal.

Quando nós trabalhamos individualmente, o nosso código não vai ser exposto para um usuário, normalmente uma branch já é o suficiente. 

Quanto tratamos de trabalhamos em equipe com um teor mais profissional, utilizamos mais de uma branch. 

Vamos desenvolvendo por exemplo o css em uma branch, o javascript em outra, o back-end em outra, com o intuito de ir desenvolvendo as funcionalidades do código mas criamos uma branch principal, com apenas as coisas que realmente estão funcionando.

Então para mandar as coisas de uma branch para outra, utilizamos o comando 'merge'

Exemplo:

branch A - repositório do Front-end
branch B - repositório do Back-end
branch Master - repositório do código que já está funcionando

Para vermos quais são as branchs do nosso projeto, rodamos o comando:

git branch

Como não criamos nenhuma outra branch até o momento o que aparece é o seguinte:

$ git branch
* master

Para criar uma nova branch nós rodamos o seguinte código:

git branch nome_da_branch

//Como há um padrão de nomear essa nova branch como staging, irei criar a branch staging, essa branch é normalmente responsável por armazenar código que ainda está em desenvolvimento 


Obs: Quando utilizamos o terminal do powershell tanto o comando clear quanto o comando cls funciona para limpar o terminal, no caso do terminal do git apenas o clear

Seguindo com o nosso projeto, vamos criar a branch staging

git branch staging

Após rodar esse comando devemos rodar o comando git branch para ver se a branch foi criada com sucesso:


$ git branch
* master
  staging

E como podemos ver a branch foi criada perfeitamente, existe um fator interessante que não é possível notar no bloco de notas, que a branch master está em verde e com um * isso porque essa é a branch que nós estamos utilizando. Para trocar de branch utilizamos o seguinte código:

git checkout nome_da_branch 

Nom meu caso:

git checkout staging

Se funcionar normalmente vai retornar "Switched to branch ..."

$ git checkout staging
Switched to branch 'staging'

Para vericarmos se funcionou rodamos o comando git branch

E tcharam esse foi o resultado:

$ git branch
  master
* staging

Fizemos uma alteração no projeto, e isso pode ser qualquer alteração apenas para teste.

Bem modificamos o projeto nessa nova branch e agora devemos fazer um commit 

Primeiramente rodamos o comando git status

Verificamos que houve modificações no nosso arquivo:

$ git status
On branch staging
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
        modified:   5 Git branch.txt

no changes added to commit (use "git add" and/or "git commit -a")

Rodamos o comando:

git add . ->

git status (E se aqui retornar que está tudo bem, podemos dar um commit) ->

git commit -m "Descrição do commit"

Agora devemos o push para subir a nossa nova branch para a nuvem, ao invés de rodarmos apenas "git push" Devemos lembrar que se trata de uma nova branch, então devemos setar novamente o nosso push como fizemos anteriormente com a branch master, para depois usarmos o git push normalmente.

git push --set-upstream origin staging

E provavelmente irá retornar essa mensagem:

$ git push --set-upstream origin staging
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 2 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 822 bytes | 274.00 KiB/s, done.
Total 3 (delta 2), reused 0 (delta 0), pack-reused 0
remote: Resolving deltas: 100% (2/2), completed with 2 local objects.
remote:
remote: Create a pull request for 'staging' on GitHub by visiting:
remote:      https://github.com/Molina0127/Aprendendo_git/pull/new/staging
remote:
To https://github.com/Molina0127/Aprendendo_git.git
 * [new branch]      staging -> staging
branch 'staging' set up to track 'origin/staging'.

Após isso quando nós vamos para o site do Github e acessamos o repositório, podemos notar que temos 2 branchs e além disso quando vemos o histórico de commits, um branch se diferencia do outro.

O branch master tem 14 commits e o branch staging tem 15 commits

A vantagem de trabalhar com branchs é que podemos separar o código que está estável do código que vai receber as atualizações.
